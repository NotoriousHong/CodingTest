
# 아동횟수가 4번보다 적은 경우와 4번 이ㅇ인 경우를 분리하여 문제를 해결한다
# 이동 횟수가 모든 방향 벡터를 한번씩 사용하는 4번이 되기 위해 체스판(nxm)은 최소 3x7 크기여야 한다
# 때문에 체스판이 n<3 or m<7인 경우 횟수가 4번이 되지 않는 것으로 간주
# n>=3인 경우 나이트는 1,4번 이동을 통해 위아래로 자유롭게 움직일 수 있기 때문에 이동경로에 영향을 받지 않게된다
# m>7인 경우에도 나이트는 오른쪽으로만 이동할 수 있기 때문에 이동경로에 영향을 주게된다
#   결국, 오른쪽으로 움직이는 2,3번 이동을 최소 한번씩만 사용하고, 나머지는 오른쪽으로 한 칸씩 움직이는 1,4번 이동을 반복한다.

# 솔루션
# n<3, m<7인 경우를 3가지 케이스로 분할한다
# n = 1
#       움직일 수 없음으로 이동횟수는 1이 된다
# n = 2
#       이동 가능 횟수는 최대 3번(모든 방향벡터를 한번씩 사용할 수 없음으로)
#       때문에 이동 가능 횟수는 3과 (M-1)//2 중 작은 값이 된다
# n >= 3, m < 7
#       n >= 3인 경우 세로로 위, 아래 두 칸씩 이동이 가능함으로 최대로 이동하기 위해서는 오른쪽으로 한칸씩 이동해야 한다
#           하지만 이러한 방식으로 최대 이동횟수는 3을 넘길 수 없다(4번 이상 이동 시 4가지 방향 벡터를 모두 사용해야 하기 때문)
#           이러한 경우 이동횟수는 m-1이 된다
#       따라서 이동가능 횟수는 3과 m-1 중 작은 값과 같다(m < 7이기 때문에 모든 방향벡터를 한번씩 사용할 수 없음으로 둘 중 작은 값이 이동횟수가 된다)
# n >= 3, m >= 7
#       모든 방향벡터를 사용할 수 있음으로 2, 3번 이동을 최소 한번씩만 사용하고 -> 나머지는 1, 4번을 이용해 오른쪽으로 한칸씩만 이동한다.
#       따라서 이동횟수는 2 + (M-5)가 된다
#              2는 2, 3번 방향벡터 이동 한번씩 카운팅 된 것이고 / M-5는 나이트가 처음 있던 한 칸과 2, 3번 이동으로 인한 4칸을 뺀 값임


n, m = map(int, input().split())

matrix = [(x, y) for y in range(m) for x in range(n)]

# 나이트 4가지 방향벡터(순서대로 문제 Options의 1, 2, 3, 4)
steps = [(2, 1), (1, 2), (-1, 2), (-2, 1)]

# 이동횟수 count
count = 0

if n == 1:
    count = 1
elif n == 2:
    count = min(4, (m - 1)//2 + 1)
elif m < 7:
    count = min(4, m)
else:
    count = (2 + (m - 5)) + 1
print(count)
